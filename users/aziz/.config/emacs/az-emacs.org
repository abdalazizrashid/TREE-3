#+title: GNU emacs literate configuration
#+email: abdalaziz.rashid@outlook.com
#+author: Abdalaziz (Aziz) R. A.M.
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content indent
#+macro: latest-export-date (eval (format-time-string "%F %T %z"))
#+macro: word-count (eval (count-words (point-min) (point-max)))

*Last revised and exported on {{{latest-export-date}}} with a word
count of {{{word-count}}}.*

* Early init configurations
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Set it to big number(100mb) like most of the popular starter kits
  ;; like Spacemacs/Doom/Prelude, etc do: Follow the method recommended
  ;; by Gnu Emacs Maintainer Eli Zaretskii: "My suggestion is to
  ;; repeatedly multiply gc-cons-threshold by 2 until you stop seeing
  ;; significant improvements in responsiveness, and in any case not to
  ;; increase by a factor larger than 100 or somesuch. If even a
  ;; 100-fold increase doesn't help, there's some deeper problem with
  ;; the Lisp code which produces so much garbage, or maybe GC is not
  ;; the reason for slowdown." Source:
  ;; <https://www.reddit.com/r/emacs/comments/brc05y/is_lspmode_too_slow_to_use_for_anyone_else/eofulix/>

  (setq gc-cons-threshold 100000000)

  ;; Increase the amount of data which Emacs reads from the process#
  ;; Again the emacs default is too low 4k considering that the some of
  ;; the language server responses are in 800k - 3M range.
  (setq read-process-output-max (* 1024 1024)) ;; 1mb

  ;; plists provide better performance in deserialization and also put
  ;; less presure than hash-tables
  (setenv "LSP_USE_PLISTS" "true")

  ;; Disable the tool bar
  (tool-bar-mode -1)
  (menu-bar-mode 1)
  (toggle-scroll-bar -1) 
  (scroll-bar-mode -1)
#+end_src

#+begin_src emacs-lisp :tangle "early-init.el"
(setq frame-resize-pixelwise t
      frame-inhibit-implied-resize t
      frame-title-format '("%b")
      ring-bell-function 'ignore
      use-dialog-box t ; only for mouse events, which I seldom use
      use-file-dialog nil
      use-short-answers t
      inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-x-resources t
      inhibit-startup-echo-area-message user-login-name ; read the docstring
      inhibit-startup-buffer-menu t)
#+end_src

* Main emacs configs
Packages customizations are defined here
#+begin_src emacs-lisp :tangle "init.el"
  ;; Garbage collect after startup
  (add-hook 'after-init-hook #'garbage-collect t)
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))


  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  ;; :config
  ;; ;; Setup a personal keymap. I'll bind various things to this later on:
  (bind-keys :prefix "<f1>"
	     :prefix-map my/map)
  (setq use-package-enable-imenu-support t
	use-package-compute-statistics t)
  (straight-use-package 'org)
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp :tangle "init.el"
  (use-package modus-themes
    :init
    ;; Add all your customizations prior to loading the themes
    (setq modus-themes-italic-constructs t
  	modus-themes-bold-constructs t
  	modus-themes-region '(bg-only)
  	modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi))
    (setq modus-themes-custom-auto-reload nil
  	modus-themes-to-toggle '(modus-operandi modus-vivendi)
  	;; modus-themes-to-toggle '(modus-operandi-tinted modus-vivendi-tinted)
  	;; modus-themes-to-toggle '(modus-operandi-deuteranopia modus-vivendi-deuteranopia)
  	;; modus-themes-to-toggle '(modus-operandi-tritanopia modus-vivendi-tritanopia)
  	modus-themes-mixed-fonts t
  	modus-themes-variable-pitch-ui t
  	modus-themes-italic-constructs t
  	modus-themes-bold-constructs nil
  	modus-themes-org-blocks nil
  	modus-themes-completions '((t . (extrabold)))
  	modus-themes-prompts '(extrabold)
    ;; 	modus-themes-headings
    ;; 	'((agenda-structure . (variable-pitch light 2.2))
    ;;         (agenda-date . (variable-pitch regular 1.3))
    ;;         (t . (regular 1.15))))

    ;; (setq 
     modus-themes-common-palette-overrides nil
    ;; '((bg-mode-line-active bg-cyan-subtle)
    ;;   (keybind yellow-warmer))
  	 )


    :bind ("<f5>" . modus-themes-toggle)

    :config
    ;; Load the theme of your choice:
    (load-theme 'modus-operandi-tinted :no-confirm)
    (modus-themes-select 'modus-operandi-tinted)
    )
#+end_src

Emacs configurations
#+begin_src emacs-lisp

  ;; Using `use-package` to configure emacs, here emacs is a pseudo
  ;; package
  (use-package emacs
    :bind* (
            ("M-o" . ace-window)
            ("C-x <C-m>" . execute-extended-command)
            ("C-c <C-m>" . execute-extended-command) ;; Sloppy version
            ("C-h h" . nil) ;; Disable the hello page
            )
    
    :custom
    (user-full-name "A.R.M")


    ;; Settings for the Cocoa port
    (ns-alternate-modifier 'super)
    (ns-command-modifier 'meta)
    (ns-function-modifier 'hyper)
    (ns-right-alternate-modifier 'super)

    ;; Settings for the Emacs Mac-port
    (mac-command-modifier 'meta)
    (mac-option-modifier 'super)
    (mac-pass-command-to-system nil)

    (frame-title-format
     '(:eval
       (concat
        (if buffer-file-name default-directory "%b")
        "    "
        (number-to-string
         (cdr
          (assq 'width
                (frame-parameters))))
        "x"
        (number-to-string
         (cdr
          (assq 'height
                (frame-parameters)))))))

    (completion-cycle-threshold 7)
    (completion-ignored-extensions
     '(".a"
       ".aux"
       ".bbl"
       ".bin"
       ".elc"
       ".git/"
       ".o"
       ".pyc"
       ".pyo"
       ".so"
       ".toc"
       "~"))

    ;; startup.el
    (auto-save-list-file-prefix (user-data "auto-save-list/.saves-"))
    (inhibit-startup-echo-area-message "aziz")
    (inhibit-startup-screen t)
    (initial-buffer-choice t)
    (initial-major-mode 'fundamental-mode)
    (initial-scratch-message "")
    (user-mail-address "abdalaziz.rashid@outlook.com")

    ;; files.el
    (auto-save-file-name-transforms '(("\\`/[^/]*:.*" "~/.emacs.d/auto-saves/" t)))
    (backup-directory-alist '(("." . "~/.local/share/emacs/backups")))
    (delete-old-versions t)
    (directory-abbrev-alist
     '(("\\`/org" . "~/org")
       ("\\`/home-manager" . "~/.config/home-manager")))
    (directory-free-space-args "-kh")
    (large-file-warning-threshold nil)
    (save-abbrevs 'silently)
    (trash-directory "~/.Trash")
    (version-control t)

    ;; bytecomp.el
    (byte-compile-verbose nil)

    ;; scroll-bar.el
    (scroll-bar-mode nil)

    ;; paren.el
    (show-paren-delay 0)

    ;; window.el
    (same-window-buffer-names
     '("*eshell*"
       "*shell*"
       "*mail*"
       "*inferior-lisp*"
       "*ielm*"
       "*scheme*"))
    (switch-to-buffer-preserve-window-point t)

    ;; warnings.el
    (warning-minimum-log-level :error)

    ;; frame.el
    (window-divider-default-bottom-width 1)
    (window-divider-default-places 'bottom-only)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))


    ;; mwheel.el
    ;; TODO: disable keybindings to  mouse-wheel-global-text-scale
    ;; and mouse-wheel-text-scale
    (global-set-key (kbd "<C-wheel-up>") nil)
    (global-set-key (kbd "<C-wheel-down>") nil)

    (vc-follow-symlinks nil)
    :init
    (setq disabled-command-function nil) ;; enable all commands


    :config  
    ;; Setup font
    ;; (advice-add 'server-create-window-system-frame
    ;;              :after 'my/setup-fonts)
    ;; (advice-add 'server-create-tty-frame
    ;;              :after 'my/setup-fonts)
    ;; (unless (daemonp) (my/setup-fonts))

    ;; ;; En
    able line numbers only with programing modes
    ;; (add-hook 'prog-mode-hook (lambda () (
    ;;           display-line-numbers-mode
    ;;           (setq-default display-line-numbers-type 'relative))))

    ;; This is an ugly hack the fix is upstream but hasn't been merge yet
    ;; https://github.com/doomemacs/doomemacs/issues/7532
    (add-hook 'after-init-hook (lambda () 
                               (tool-bar-mode 1) 
                               (tool-bar-mode 0)))
    (defun my-toggle-toolbar (frame)
      "Toggle tool-bar-mode on then off when a new frame is created."
      (with-selected-frame frame
        (tool-bar-mode 1)
        (tool-bar-mode 0)))

    (add-hook 'after-make-frame-functions 'my-toggle-toolbar)
    )
#+end_src
** String processing
#+begin_src emacs-lisp :tangle "init.el"
  (use-package s)
#+end_src
** Async
Used by other packages such as org-ref
#+begin_src emacs-lisp :tangle "init.el"
  (use-package async)
#+end_src
** Tramp
#+begin_src emacs-lisp :tangle "init.el" :tangle no
  ;; Tramp
  ;;;; https://www.gnu.org/software/emacs/manual/html_node/tramp/Ssh-setup.html
  (use-package tramp
    :config
    (setq tramp-ssh-controlmaster-options
  	(concat
  	 "-o ControlMaster=auto "
  	 "-o ControlPath=~/tmp/.ssh-control-%%r-%%h-%%p"))
    (tramp-set-completion-function
     "ssh" (append (tramp-get-completion-function "ssh")
  		 (mapcar (lambda (file) `(tramp-parse-sconfig ,file))
  			 (directory-files
                            "~/.ssh/conf.d/"
                            'full directory-files-no-dot-files-regexp))))

    (setq tramp-default-method "ssh")
    (add-hook 'helm-tramp-pre-command-hook '(lambda () (global-aggressive-indent-mode 0)
  					    (projectile-mode 0)
  					    ;;(editorconfig-mode 0)
  					    ))
    (add-hook 'helm-tramp-quit-hook '(lambda () (global-aggressive-indent-mode 1)
  				     (projectile-mode 1)
  				     ;;(editorconfig-mode 1)
  				     ))
    (setq make-backup-files nil)
    (setq create-lockfiles nil)
    :custom
    (custom-set-variables  '(tramp-remote-path
                             (quote
                              (tramp-own-remote-path))))
    (debug-ignored-errors
     (cons 'remote-file-error debug-ignored-errors))
    (tramp-lock-file-name-transforms
     '(("\\`\\(.+\\)\\'" "\\1~"))))
#+end_src

* Font configuration
I use ~fontaine~ a package allows the user to define detailed font
configurations and set them on demand. For example, one can have a
regular-editing preset and another for presentation-mode (these are
arbitrary, user-defined symbols): the former uses small fonts which
are optimised for writing, while the latter applies typefaces that are
pleasant to read at comfortable point sizes.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package fontaine
    :config
    (setq fontaine-presets
          '((small
             :default-family "Berkeley Mono"
             :default-height 80
             :variable-pitch-family "Berkeley Mono")
            (regular) ; like this it uses all the fallback values and is named `regular'
            (medium
             :default-weight semilight
             :default-height 115
             :bold-weight extrabold)
            (large
             :inherit medium
             :default-height 150)
            (presentation
             :inherit medium
             :default-weight light
             :default-height 180)
            (t
             ;; I keep all properties for didactic purposes, but most can be
             ;; omitted.  See the fontaine manual for the technicalities:
             ;; <https://protesilaos.com/emacs/fontaine>.
             :default-family "Berkeley Mono"
             :default-weight regular
             :default-height 100
             :fixed-pitch-family nil ; falls back to :default-family
             :fixed-pitch-weight nil ; falls back to :default-weight
             :fixed-pitch-height 1.0
             :fixed-pitch-serif-family nil ; falls back to :default-family
             :fixed-pitch-serif-weight nil ; falls back to :default-weight
             :fixed-pitch-serif-height 1.0
             :variable-pitch-family "Berkeley Mono"
             :variable-pitch-weight nil
             :variable-pitch-height 1.0
             :bold-family nil ; use whatever the underlying face has
             :bold-weight bold
             :italic-family nil
             :italic-slant italic
             :line-spacing nil)))

    ;; Set last preset or fall back to desired style from `fontaine-presets'.
    (fontaine-set-preset (or (fontaine-restore-latest-preset) 'regular))

    ;; The other side of `fontaine-restore-latest-preset'.
    (add-hook 'kill-emacs-hook #'fontaine-store-latest-preset)

    ;; Persist font configurations while switching themes.  The
    ;; `enable-theme-functions' is from Emacs 29.
    (add-hook 'enable-theme-functions #'fontaine-apply-current-preset)

  )
#+end_src

* Completion
** vetico
#+begin_src emacs-lisp :tangle "init.el"
  ;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Support opening new minibuffers from inside existing minibuffers.
  (setq enable-recursive-minibuffers t)

  ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
  ;; mode.  Vertico commands are hidden in normal buffers. This setting is
  ;; useful beyond Vertico.
  (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src
** corfu
Corfu enhances in-buffer completion with a small completion popup. The
current candidates are shown in a popup below or above the point. The
candidates can be selected by moving up and down. Corfu is the
minimalistic in-buffer completion counterpart of the Vertico
minibuffer UI. 
#+begin_src emacs-lisp :tangle "init.el"
    (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    ;; (setq completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
    ;; try `cape-dict'.
    (setq text-mode-ispell-word-completion nil)

    ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
    ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
    ;; setting is useful beyond Corfu.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src
** orderless
#+begin_src emacs-lisp :tangle "init.el"
  ;;;; Orderless
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion))))
    :config
    (defun prefixes-for-separators (pattern _index _total)
      (when (string-match-p "^[^][^\\+*]*[./-][^][\\+*$]*$" pattern)
        (cons 'orderless-prefixes pattern)))
    (cl-pushnew '(?` . orderless-regexp) orderless-affix-dispatch-alist)
    :custom
    (orderless-style-dispatchers
     '(orderless-affix-dispatch prefixes-for-separators))
    )

#+end_src
** embark
#+begin_src emacs-lisp :tangle "init.el"
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src
** Marginalia
Enable rich annotations using the Marginalia package
#+begin_src emacs-lisp  :tangle "init.el"
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src
** TODO ivy
** consult
#+begin_src emacs-lisp :tangle "init.el"
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-fd)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)

    (add-to-list 'consult-fd-args "--hidden" t)
    (add-to-list 'consult-fd-args "--exclude .git" t)
    )

#+end_src
The package embark-consult should be installed if you use both Embark and Consult
#+begin_src emacs-lisp :tangle "init.el"
  (use-package embark-consult)
#+end_src
** Helm
#+begin_src emacs-lisp 
  ;;;; Helm
  (use-package helm-rg
  :straight t)

  (use-package helm-projectile
    :straight t
    :config
    (helm-projectile-on))


  (use-package helm-tramp
    :straight t
    :config
    (define-key global-map (kbd "C-c s") 'helm-tramp))

  (use-package helm-org-rifle
     :straight t)

  (use-package helm-bibtex
    :straight t
    :config)

  (use-package helm
    :straight t
    :demand t
    :config
    (require 'helm-source)

    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x m") #'helm-M-x)
    (global-set-key (kbd "C-c m") #'helm-M-x)
    (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "C-c i n") #'helm-complete-file-name-at-point)
    (global-set-key (kbd "C-x i") #'helm-imenu)
    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
    (global-set-key (kbd "C-c h x") 'helm-register)
    (global-set-key (kbd "C-c h M-:") 'helm-eval-expression-with-eldoc)

    (setq helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match    t)

    ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
    ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
    ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))

    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z


    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))

    ; open helm buffer inside current window, not occupy whole other window
    (setq helm-split-window-in-side-p           t
          ; move to end or beginning of source when reaching top or bottom of source.
          helm-move-to-line-cycle-in-source     t
          ; search for library in `require' and `declare-function' sexp.
          helm-ff-search-library-in-sexp        t
          ; scroll 8 lines other window using M-<next>/M-<prior>
          helm-scroll-amount                    8
          helm-ff-file-name-history-use-recentf t
          helm-echo-input-in-header-line t)

    (defun spacemacs//helm-hide-minibuffer-maybe ()
      "Hide minibuffer in Helm session if we use the header line as input field."
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))

    ;; (when (executable-find "ack-grep")
    ;; (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
    ;;       helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))

    (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

    (add-hook 'helm-minibuffer-set-up-hook
              'spacemacs//helm-hide-minibuffer-maybe)

    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 40)
    (helm-autoresize-mode 1)



    (setq helm-completion-style 'helm)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-apropos-fuzzy-match t)
    (setq helm-lisp-fuzzy-completion t)
    (helm-mode t)
    )
    #+end_src
** ido
#+begin_src emacs-lisp
  ;;;; ido
  (use-package ido
    :config
    (setq ido-enable-flex-matching t)
    (ido-mode t)
    ;;(setq ido-everywhere t)
#+end_src
** Avy
#+begin_src emacs-lisp :tangle "init.el"
  (use-package avy
    :straight t
    :config
    (avy-setup-default)
    :bind
    (("C-:" . avy-goto-char)
     ("C-'" . avy-goto-char-2)
     ("M-g f" . avy-goto-line)
     ("M-g w" . avy-goto-word-1)
     ("M-g e" . avy-goto-word-0)
     ("C-c C-j" . avy-resume)))
#+end_src
* Knowledge management
** Hyperbole
I use hyperbole to control multiple aspects of emacs
#+begin_src emacs-lisp :tangle "init.el"
  ;;;; Hyperbole
  (use-package hyperbole
    :config
    (add-to-list 'Info-directory-list (concat hyperb:dir "man/"))
    (add-to-list 'hyrolo-file-list (concat org-directory "people.org"))
    (hyperbole-mode t)
    (add-hook 'hyperbole-init-hook
              (lambda ()
                (require 'org)
                (setq hyrolo-file-list (append (hyrolo-initialize-file-list)
                                               (list org-directory))))))
#+end_src
** Org mode
Org is the main component of knowledge management
#+begin_src emacs-lisp :tangle "init.el"
  ;;;; Org-mode
  (use-package org
    :init
    ;;;; org babel support for nix
    (use-package ob-nix)
    :bind
    ("C-c l" . 'org-store-link)
    ("C-c a" . 'org-agenda)
    ("C-c c" . 'org-capture)
    :hook (org-mode . auto-revert-mode)
    :config
    (require 'org-protocol)
    (setq auto-revert-verbose nil)
    (setq org-directory
          "~/Documents/org/")
    (setq org-log-done 'time)
    (setq org-agenda-files (list org-directory))
    (setq org-refile-use-outline-path 'file)
    (setq org-refile-targets '(
                               (nil :maxlevel . 5)
                               (org-agenda-files :maxlevel . 5)))
    (setq org-outline-path-complete-in-steps nil)
    (setq org-default-notes-file (concat org-directory "notes.org"))
    (setq org-capture-templates
          `(("i" "inbox" entry (file ,(concat org-directory "inbox.org"))
             "* TODO %?")
            ("l" "link" entry (file ,(concat org-directory "inbox.org"))
             "* TODO %(org-cliplink-capture)" :immediate-finish t)
            ("c" "org-protocol-capture" entry (file ,(concat org-directory "/inbox.org"))
             "* TODO [[%:link][%:description]]\n\n %i" :immediate-finish t)
            ("u" "URL capture from Safari" entry (
                                                  file+olp+datetree ,(concat org-directory "/links.org"))
             "* %i    :safari:url:\n%U\n\n")))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((nix . t)
       (shell . t)
       (python . t)))
    (setq org-preview-latex-default-process 'dvisvgm))

#+end_src
#+begin_src emacs-lisp :tangle "init.el"

  (use-package org-transclusion)

  (use-package org-noter
    :config
    (setq org-noter-auto-save-last-location t))

  (use-package org-ref
    :bind
    (:map org-mode-map
          ("C-c ]" . org-ref-insert-link))
    :config
    (require 'org-ref-arxiv)
    (require 'org-ref-scopus)
    (require 'org-ref-wos)
    :custom
    ;;  (bibtex-completion-bibliography '("~/Documents/bibliography.bib"))
    (bibtex-completion-bibliography '("~/Documents/library/inbox.bib"))
    (bibtex-completion-library-path '("~/Documents/library/"))
    (bibtex-completion-notes-path "~/Documents/library/notes/")
    (bibtex-completion-notes-template-multiple-files "*${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}:
   \n\nSee [[cite:&${=key=}]]\n")
    (bibtex-completion-additional-search-fields '(keywords))
    (bibtex-completion-display-formats '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}
   ${journal:40}")
                                         (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}
   Chapter ${chapter:32}")
                                         (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}
   ${booktitle:40}")
                                         (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}
   ${booktitle:40}")
                                         (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}")))
    (bibtex-completion-pdf-open-function (lambda (fpath) (call-process "open" nil 0 nil fpath))))
#+end_src
*** TODO 3rd party importers
#+begin_src emacs-lisp :tangle "init.el"
  ;; (load "other_importers.el")
#+end_src

*** COMMENT Publishing
#+begin_src emacs-lisp
  (require 'ox-publish)
  (require 'ox-html)

  (setq org-global-properties
        '(("PUBLISH" . "yes no")))

  ;; (defun blog/org-publish-headline-filter (backend)
  ;;   "Filter headlines based on the PUBLISH property before publishing.
  ;; Only publish headlines with the property :PUBLISH: set to 'yes'."
  ;;   (org-map-entries
  ;;    (lambda ()
  ;;      (let ((publish (org-entry-get (point) "PUBLISH")))
  ;;        (unless (and publish (string= publish "yes"))
  ;;          (org-cut-subtree))))
  ;;    nil 'file))
  ;; (remove-hook 'org-export-before-processing-hook #'blog/org-publish-headline-filter)

  (defun blog/org-publish-after-publish (plist)
    "Open the browser to the published site after publishing."
    (browse-url (concat "file://" (expand-file-name "public/index.html" site-dir))))

  (setq org-html-head
        "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />")
  (setq org-html-validation-link nil)
  (setq org-html-head-include-scripts "<script data-goatcounter=\"https://aziz.goatcounter.com/count\" async src=\"//gc.zgo.at/count.js\"> </script>")
  ;; Use our own scripts
  ;; org-html-head-include-default-style nil ;; Use our own styles
  ;;  org-html-head "<link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" />"



  (defvar site-dir "~/Documents/org/")
  (defvar publish-dir "~/tree-3/users/aziz/blog/")

  (setq org-publish-project-alist
        `(("blog-org-files"
  	 :base-directory ,site-dir
  	 :base-extension "org"
  	 :publishing-directory ,publish-dir
  	 :recursive t
  	 :publishing-function org-html-publish-to-html
  	 :headline-levels 4
  	 :auto-preamble t
  	 :auto-sitemap t
  	 :exclude ".*.org"
  	 :include ("pkg.org" "az-emacs.org", "dft.org")
  	 :html-postamble nil
  	 :section-numbers nil
  	 :sitemap-filename "index.org"
  	 ;;:sitemap-sort-files 'anti-chronologically
  	 :sitemap-title "Site map"
  	 :with-author t
  	 :with-date t
  	 :with-title t
  	 :with-toc t
  	 :makeindex t
  	 :completion-function blog/org-publish-after-publish)

  	("blog-static"
  	 :base-directory ,site-dir
  	 :base-extension "css\\|js\\|png\\|jpg\\|gif"
  	 :publishing-directory ,publish-dir ;;,(concat publish-dir "html/")
  	 :recursive t
  	 :publishing-function org-publish-attachment)

  	("blog" :components ("blog-org-files" "blog-static"))))


#+end_src
** Bibliography
#+begin_src emacs-lisp :tangle "init.el"
  (use-package bibtex
    :straight t
    :custom
    (bibtex-autokey-year-length 4)
    (bibtex-autokey-name-year-separator "-")
    (bibtex-autokey-year-title-separator "-")
    (bibtex-autokey-titleword-separator "-")
    (bibtex-autokey-titlewords 2)
    (bibtex-autokey-titlewords-stretch 1)
    (bibtex-autokey-titleword-length 5)
    :bind
    (:map bibtex-mode-map
          ("H-b" . org-ref-bibtex-hydra/body)))

  (use-package ebib
   :after
   (use-package org-ebib)
   :custom
   (global-set-key (kbd "C-c e") 'ebib)
   (setq ebib-bibtex-dialect 'biblatex) 
   (setq ebib-preload-bib-files '("../research/bibliography.bib" "~/Documents/bibliography.bib")))
#+end_src
* Document viewers
**PDF
#+begin_src emacs-lisp :tangle "init.el"
  (use-package pdf-tools)
#+end_src
** DJVU
#+begin_src emacs-lisp :tangle "init.el"
   (use-package djvu)
#+end_src
** Markdown
#+begin_src emacs-lisp :tangle "init.el"
  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
#+end_src
* Editing
** Treesitter
#+begin_src emacs-lisp :tangle "init.el"
  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))

  ;; (dolist (mapping
  ;;          '((python-mode . python-ts-mode)
  ;; 	   (elixir-mode . elixir-ts-mode)
  ;;            (css-mode . css-ts-mode)
  ;;            (typescript-mode . typescript-ts-mode)
  ;;            (js2-mode . js-ts-mode)
  ;;            (bash-mode . bash-ts-mode)
  ;;            (css-mode . css-ts-mode)
  ;;            (json-mode . json-ts-mode)
  ;;            (js-json-mode . json-ts-mode))))

  ;; (add-to-list 'major-mode-remap-alist mapping)

  ;; (setq treesit-language-source-alist
  ;;    '((bash "https://github.com/tree-sitter/tree-sitter-bash")
  ;;      (cmake "https://github.com/uyha/tree-sitter-cmake")
  ;;      (css "https://github.com/tree-sitter/tree-sitter-css")
  ;;      (elisp "https://github.com/Wilfred/tree-sitter-elisp")
  ;;      (go "https://github.com/tree-sitter/tree-sitter-go")
  ;;      (html "https://github.com/tree-sitter/tree-sitter-html")
  ;;      (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
  ;;      (json "https://github.com/tree-sitter/tree-sitter-json")
  ;;      (make "https://github.com/alemuller/tree-sitter-make")
  ;;      (markdown "https://github.com/ikatyang/tree-sitter-markdown")
  ;;      (python "https://github.com/tree-sitter/tree-sitter-python")
  ;;      (toml "https://github.com/tree-sitter/tree-sitter-toml")
  ;;      (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
  ;;      (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
  ;;      (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  ;; (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))


  (use-package combobulate
    :straight (combobulate :type git :host github :repo "mickeynp/combobulate")
    :preface
    (setq combobulate-key-prefix "C-c o")
    :hook
    ((python-ts-mode . combobulate-mode)
     (js-ts-mode . combobulate-mode)
     (html-ts-mode . combobulate-mode)
     (css-ts-mode . combobulate-mode)
     (yaml-ts-mode . combobulate-mode)
     (typescript-ts-mode . combobulate-mode)
     (json-ts-mode . combobulate-mode)
     (tsx-ts-mode . combobulate-mode)))
#+end_src
** Version control
#+begin_src emacs-lisp :tangle "init.el"
  (use-package magit
    :bind ("C-x g" . magit-status)
    :custom
    (magit-define-global-key-bindings 'recommended))
#+end_src
    
** Navigation
*** Eglot
#+begin_src emacs-lisp :tangle "init.el"
   ;;;; eglot
  (use-package eglot
    :commands eglot
    :defer t
    :custom
    (eglot-autoshutdown t)
    :bind (:map eglot-mode-map
                ("C-c C-d" . eldoc))
  ;;              ("C-c C-e" . eglot-rename)
  ;;              ("C-c C-o" . python-sort-imports)
  ;;              ("C-c C-f" . eglot-format-buffer))
    :hook ((python-ts-mode . eglot-ensure)
           (python-ts-mode . flyspell-prog-mode)
           (python-ts-mode . superword-mode)
           (python-ts-mode . hs-minor-mode)
           (python-ts-mode . (lambda () (set-fill-column 88)))
           (nix-ts-mode . eglot-ensure)
           (tex-mode . eglot-ensure)
           ;; (prog-mode . (lambda ()
           ;;               (add-hook 'before-save-hook 'eglot-format nil t)))
           )

    :config
    (add-to-list
     'eglot-server-programs
     '(nix-ts-mode
       . ("nix-shell" "-p" "nixd" "--run" "nixd")))
    (add-to-list
     'eglot-server-programs
     '((elixir-ts-mode heex-ts-mode)
       ;; TODO remove elixir package from runtime shell
       . ("nix-shell" "-p" "elixir-ls" "elixir" "--run" "elixir-ls")))

    (setq read-process-output-max (* 1024 1024))
    ;; (with-eval-after-load 'eglot
    ;;   (dolist (mode '((nix-mode . ("nixd"))))
    ;;     (add-to-list 'eglot-server-programs mode)))


    (add-hook 'eglot-managed-mode-hook
            #'(lambda ()
                ;; Show flymake diagnostics first.
                (setq eldoc-documentation-functions
                      (cons #'flymake-eldoc-function
                            (remove #'flymake-eldoc-function
                                    eldoc-documentation-functions)))))
    (setq-default eglot-workspace-configuration '(
        (:pylsp . (:configurationSources ["flake8"] :plugins (
                   :pycodestyle (:enabled t) :mccabe (:enabled t)
                   :pyflakes (:enabled t) :flake8 (:enabled t
                   :maxLineLength 88) :ruff (:enabled t :lineLength 88)
                   :pydocstyle (:enabled t :convention "numpy") :yapf
                   (:enabled t) :autopep8 (:enabled :json-false) :black
                   (:enabled t :line_length 88 :cache_config t))))

        (:nixd
         (:nixpkgs
          (:expr "import <nixpkgs> { }"))))))
#+end_src

*** dumb-jump
#+begin_src emacs-lisp :tangle "init.el"
  (use-package dumb-jump
    :straight t
    ;; :hook
    ;; (('xref-backend-functions #'dumb-jump-xref-activate))
    :config
    (setq dumb-jump-force-searcher 'rg)
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
    (setq xref-show-definitions-function 'xref-show-definitions-completing-read)
    ;; (setq xref-show-definitions-function 'xref-show-definitions-buffer)
    )
#+end_src
** Project management
#+begin_src emacs-lisp :tangle "init.el"
  ;; projectile
  (use-package projectile
  :init
  (projectile-mode t)
  (require 'tramp)
  :bind
  ((:map projectile-mode-map
         ("s-p" . projectile-command-map))
         ("s-p v" . 'magit))

  :config
  (setq projectile-sort-order 'recentf)
  (setq projectile-git-use-fd t)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'helm)
  (setq projectile-switch-project-action 'helm-projectile)
  (advice-add 'projectile-project-root :before-while
              (lambda (&optional dir)
                (not (file-remote-p (or dir default-directory)))))
  (add-to-list 'projectile-other-file-alist '("ex" . ("html.heex" "html.leex")))
  (add-to-list 'projectile-other-file-alist '("html.heex" . ("ex")))
  (add-to-list 'projectile-other-file-alist '("html.leex" . ("ex")))
  )
#+end_src
** Programming languages
*** Elixir
#+begin_src emacs-lisp :tangle "init.el"
  (use-package elixir-mode)
#+end_src
*** Nix
https://github.com/NixOS/nix-mode?tab=readme-ov-filelsp
#+begin_src emacs-lisp :tangle "init.el"
  ;; Nix
  (use-package nix-mode
    :mode ("\\.nix\\'" "\\.nix.in\\'")
    :config
    ;; (use-package nix-drv-mode
    ;;   :ensure nix-mode
    ;;   :mode "\\.drv\\'")

    ;; (use-package nix-shell
    ;;   :ensure nix-mode
    ;;   :commands (nix-shell-unpack nix-shell-configure nix-shell-build))

    ;; (use-package nix-repl
    ;;   :ensure nix-mode
    ;;   :commands (nix-repl))
    )
#+end_src

*** Terraform
#+begin_src emacs-lisp :tangle "init.el"
  (use-package terraform-mode
   :custom (terraform-indent-level 4)
   :config
   (defun my-terraform-mode-init ()
     ;; if you want to use outline-minor-mode
     ;; (outline-minor-mode 1)
     )
   (add-hook 'terraform-mode-hook 'my-terraform-mode-init))
#+end_src

*** Typescript
#+begin_src emacs-lisp :tangle "init.el"
  (add-to-list 'auto-mode-alist '("\\.ts\\(x\\)?\\'" . tsx-ts-mode))
#+end_src
** Snippets
#+begin_src emacs-lisp :tangle "init.el"
  (use-package yasnippet
    :config
    (yas-global-mode 1)
    ;; get more snippets from here
    ;; https://github.com/AndreaCrotti/yasnippet-snippets/tree/master/snippets
    (setq yas-snippet-dirs
        '("~/.emacs.d/snippets")))
#+end_src

** Mathematics
#+begin_src emacs-lisp :tangle "init.el"
  ;; Auctex
  (use-package auctex)
  (use-package cdlatex)
  (use-package tex
    :straight nil
    :ensure auctex
    :defer t
   ;; :mode ("\\.tex\\'" . LaTeX-mode)
    :hook ((LaTeX-mode . TeX-source-correlate-mode)
           (LaTeX-mode . TeX-PDF-mode)
           (LaTeX-mode . turn-on-reftex)
           (LaTeX-mode . abbrev-mode))
    :custom
    (TeX-PDF-mode t)
    (TeX-auto-save t)
    (TeX-auto-untabify t)
    (TeX-electric-escape t)
    (TeX-electric-math '("\\(" . "\\)"))
    (TeX-engine 'xetex)
    (TeX-parse-self t)
    (TeX-master nil)
    ;; Eglot keybindings interferes with auctex
    (with-eval-after-load 'eglot
      (define-key eglot-mode-map (kbd "C-c C-e") nil)
    :config
    ;; Set Skim as the PDF viewer
    (setq TeX-view-program-list
          '(("Skim" "open -a Skim.app %o")))
    (setq TeX-view-program-selection
          '((output-pdf "Skim")
            ((output-dvi style-pstricks)
             "dvips and gv")
            (output-dvi "xdvi")
            (output-html "open")))
    ;; Configure Skim to auto-reload PDF files
    (setq TeX-source-correlate-mode t)
    (setq TeX-source-correlate-start-server t)
    ;; Sync TeX source with Skim
    (add-hook 'TeX-after-compilation-finished-functions
              #'TeX-revert-document-buffer)))


  ;;   :defines
  ;;   (latex-help-cmd-alist
  ;;    latex-help-file)
  ;;   :preface
  ;;   (defvar latex-prettify-symbols-alist
  ;;     '(("\N{THIN SPACE}" . ?\⟷)))
  ;;   :config
  ;;   (require 'preview)

    ;; (defun latex-help-get-cmd-alist ()    ;corrected version:
    ;;   "Scoop up the commands in the index of the latex info manual.
    ;;  The values are saved in `latex-help-cmd-alist' for speed."
    ;;   ;; mm, does it contain any cached entries
    ;;   (if (not (assoc "\\begin" latex-help-cmd-alist))
    ;;       (save-window-excursion
    ;;         (setq latex-help-cmd-alist nil)
    ;;         (Info-goto-node (concat latex-help-file "Command Index"))
    ;;         (goto-char (point-max))
    ;;         (while (re-search-backward "^\\* \\(.+\\): *\\(.+\\)\\." nil t)
    ;;           (let ((key (buffer-substring (match-beginning 1) (match-end 1)))
    ;;                 (value (buffer-substring (match-beginning 2)
    ;;                                          (match-end 2))))
    ;;             (add-to-list 'latex-help-cmd-alist (cons key value))))))
    ;;   latex-help-cmd-alist)

    ;; (info-lookup-add-help :mode 'LaTeX-mode
    ;;                       :regexp ".*"
    ;;                       :parse-rule "\\\\?[a-zA-Z]+\\|\\\\[^a-zA-Z]"
    ;;                       :doc-spec '(("(latex2e)Concept Index")
    ;;                                   ("(latex2e)Command Index")))

    ;; (add-hook 'LaTeX-mode-hook
    ;;           #'(lambda
    ;;               ()
    ;;               (setq-local prettify-symbols-alist latex-prettify-symbols-alist)
    ;;               (prettify-symbols-mode 1)))

    ;; (add-hook 'TeX-after-compilation-finished-functions
    ;;           #'TeX-revert-document-buffer))
#+end_src
* Misc
** Slurm
#+begin_src emacs-lisp :tangle "init.el"
  (use-package slurm-mode
    :config
    (require 'slurm-script-mode))
#+end_src

** Distraction free environment
#+begin_src emacs-lisp :tangle "init.el"
  (use-package writeroom-mode)
#+end_src
* Rest
#+begin_src emacs-lisp :tangle "init.el" :tangle no
    (use-package auto-compile
      :straight t
      :demand t
      :custom
      (auto-compile-mode-line-counter t "Show compile info in the mode-line")
      (auto-compile-source-recreate-deletes-dest t)
      (auto-compile-toggle-deletes-nonlib-dest t)
      (auto-compile-update-autoloads t)
      (auto-compile-display-buffer nil "Don't display compile buffer")
      :hook
      (auto-compile-inhibit-compile . auto-compile-inhibit-compile-detached-git-head)
      :config
      (auto-compile-on-load-mode)
      (auto-compile-on-save-mode))

  (use-package no-littering
    :straight t
    :demand t)



  ;; ;; Load use packages
  ;; (eval-and-compile
  ;;   (defsubst emacs-path (path)
  ;;     (expand-file-name path user-emacs-directory))

  ;;   (setq package-enable-at-startup nil
  ;;         load-path
  ;;         (append (list (emacs-path "use-package"))
  ;;                 (delete-dups load-path)
  ;;                 (list (emacs-path "lisp")))))

  ;; (require 'use-package)
  ;; ;; Set use-package to always ensure packages are installed
  ;; (setq use-package-always-ensure t)

  ;; ;; (setq use-package-verbose init-file-debug
  ;; ;;       use-package-expand-minimally (not init-file-debug)
  ;; ;;       use-package-compute-statistics t
  ;; ;;       debug-on-error init-file-debug)

  ;; ;; Define the “data environment” for this instance of Emacs

  ;; (defconst emacs-environment (or (getenv "NIX_MYENV_NAME") "default"))

  ;; (defconst emacs-data-suffix
  ;;   (cond ((string= "emacsERC" emacs-environment) "alt")
  ;;         ((string-match "emacs2[6789]\\(.+\\)$" emacs-environment)
  ;;          (match-string 1 emacs-environment))))

  ;; (defconst alternate-emacs (string= emacs-data-suffix "alt"))

  ;; (defconst user-data-directory
  ;;   (emacs-path (if emacs-data-suffix
  ;;                   (format "data-%s" emacs-data-suffix)
  ;;                 "data")))

  ;; (defun user-data (
  ;;   (expand-file-name dir user-data-directory)))

  ;; Font setup
  ;; https://slumpy.org/blog/2016-01-11-proper-way-to-setup-fonts-in-emacs/


  (defun my/setup-fonts ()
    (interactive)
    (set-face-font 'default "Berkeley Mono-15")
    (set-fontset-font t 'hebrew (font-spec :name "Berkeley Mono-15"))
  )


  ;; (add-to-list 'default-frame-alist '(font . "Berkeley Mono" ))
  ;; (set-face-attribute 'default t :font "Berkeley Mono")



  ;; (use-package package
  ;;   :custom
  ;;   (setq package-archives '(("melpa-stable" . "https://stable.melpa.org/packages/")
  ;;                          ("melpa" . "https://melpa.org/packages/")
  ;;                          ("gnu" . "http://elpa.gnu.org/packages/")
  ;; 			 ("org" . "http://orgmode.org/elpa/")))

  ;;   (defun validate-package-urls (urls)
  ;;     "Validate the given package repository URLs."
  ;;     (dolist (url urls)
  ;;       (unless (string-match "\\`https?:" (cdr url))
  ;; 	(error "Invalid URL: %s" (cdr url)))))

  ;;   (validate-package-urls package-archives)

  ;;   (package-initialize))



  (use-package imenu
    :config
    (setq imenu-auto-rescan t)
    (add-hook 'emacs-lisp-mode-hook
              (lambda ()
                (setq imenu-generic-expression
                      '((nil "^\\s-*(use-package\\s-+\\(\\_<.+?\\_>\\)" 1))))))

  ;;;; ibuffer
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer)
    :custom
    (ibuffer-default-display-maybe-show-predicates t)
    (ibuffer-expert t)
    (ibuffer-formats
     '((mark modified read-only " "
             (name 16 -1)
             " "
             (size 6 -1 :right)
             " "
             (mode 16 16)
             " " filename)
       (mark " "
             (name 16 -1)
             " " filename)))
    (ibuffer-maybe-show-regexps nil)
    (ibuffer-saved-filter-groups
     '(("default"
        ("Magit"
         (or
          (mode . magit-status-mode)
          (mode . magit-log-mode)
          (name . "\\*magit")
          (name . "magit-")
          (name . "git-monitor")))
        ("Coq"
         (or
          (mode . coq-mode)
          (name . "\\<coq\\>")
          (name . "_CoqProject")))
        ("Commands"
         (or
          (mode . shell-mode)
          (mode . eshell-mode)
          (mode . term-mode)
          (mode . compilation-mode)))
        ("Haskell"
         (or
          (mode . haskell-mode)
          (mode . haskell-cabal-mode)
          (mode . haskell-literate-mode)))
        ("Rust"
         (or
          (mode . rust-mode)
          (mode . cargo-mode)
          (name . "\\*Cargo")
          (name . "^\\*rls\\(::stderr\\)?\\*")
          (name . "eglot")))
        ("Nix"
         (mode . nix-mode))
        ("C++"
         (or
          (mode . c-mode)
          (mode . c++-mode)))
        ("Lisp"
         (mode . emacs-lisp-mode))
        ("Dired"
         (mode . dired-mode))
        ("Gnus"
         (or
          (mode . message-mode)
          (mode . mail-mode)
          (mode . gnus-group-mode)
          (mode . gnus-summary-mode)
          (mode . gnus-article-mode)
          (name . "^\\.newsrc-dribble")
          (name . "^\\*\\(sent\\|unsent\\|fetch\\)")
          (name . "^ \\*\\(nnimap\\|nntp\\|nnmail\\|gnus\\|server\\|mm\\*\\)")
          (name . "\\(Original Article\\|canonical address\\|extract address\\)")))
        ("Org"
         (or
          (name . "^\\*Calendar\\*$")
          (name . "^\\*Org Agenda")
          (name . "^ \\*Agenda")
          (name . "^diary$")
          (mode . org-mode)))
        ("Emacs"
         (or
          (name . "^\\*scratch\\*$")
          (name . "^\\*Messages\\*$")
          (name . "^\\*\\(Customize\\|Help\\)")
          (name . "\\*\\(Echo\\|Minibuf\\)"))))))
    (ibuffer-show-empty-filter-groups nil)
    (ibuffer-shrink-to-minimum-size t t)
    (ibuffer-use-other-window t)
    :init
    (add-hook 'ibuffer-mode-hook
              #'(lambda ()
                  (ibuffer-switch-to-saved-filter-groups "default"))))

  (use-package dired
    :straight nil
    :ensure nil
    :config
    ;; (when (string= system-type "darwin")
    ;;   (setq dired-use-ls-dired t
    ;;         insert-directory-program "/usr/local/bin/gls"
    ;;         dired-listing-switches "-aBhl --group-directories-first")))
  )
  (use-package dired-x
    :straight nil
    :ensure nil
    :after dired
    :config
    (add-hook 'dired-mode-hook #'dired-omit-mode))

  ;; Project management
  ;;;; projectile



  ;; Terminal emulator
  ;;;; vterm
  (use-package vterm
    :disabled
    :straight t
    :defer t)



  ;; Manuals and Docs
  ;;;; info TODO: read and refactor
  (use-package info
    :bind ("C-h C-i" . info-hlookup-symbol)
    :custom
    ;; (Info-default-directory-list (list (emacs-path "lisp/org-mode/doc")))
    (Info-fit-frame-flag nil)
    :autoload Info-goto-node
    :preface
    (eval-when-compile
      (defvar buffer-face-mode-face))

    (defun nix-read-environment (name)
      (ignore-errors
        (with-temp-buffer
          (insert-file-contents-literally
           (with-temp-buffer
             (insert-file-contents-literally
              (executable-find (concat "load-env-" name)))
             (and (re-search-forward "^source \\(.+\\)$" nil t)
                  (match-string 1))))
          (and (or (re-search-forward "^  nativeBuildInputs=\"\\(.+?\\)\"" nil t)
                   (re-search-forward "^  buildInputs=\"\\(.+?\\)\"" nil t))
               (split-string (match-string 1))))))
    :init
    (defvar Info-directory-list
      (mapcar 'expand-file-name
              (append
               (mapcar (apply-partially #'expand-file-name "share/info")
                       (nix-read-environment emacs-environment))
               '("~/.local/share/info"
                 "~/.nix-profile/share/info"
                 "/etc/profiles/per-user/aziz/share/info/"
                 "/run/current-system/sw/share/info/"
                 ))))
    :config
    ;; (add-hook 'Info-mode-hook
    ;;           #'(lambda ()
    ;;                (setq buffer-face-mode-face '(:family "Arial"))
    ;;                (buffer-face-mode)
    ;;                (text-scale-adjust 1)
    ;; 		))
  )


  (use-package info-look :autoload info-lookup-add-help)

  ;; (use-package info-lookmore
  ;;   :enable nil
  ;;   :after info-look
  ;;   :config
  ;;   (info-lookmore-elisp-cl)
  ;;   (info-lookmore-elisp-userlast)
  ;;   (info-lookmore-elisp-gnus)
  ;;   (info-lookmore-apropos-elisp))


  ;; My packages
  (use-package capture-frame
    :disabled
    :load-path "./capture-frame.el"
    :commands (my/make-capture-frame))


  (use-package exec-path-from-shell
    :straight t
    :config
    (exec-path-from-shell-initialize)
    (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
      (add-to-list 'exec-path-from-shell-variables var))
    (exec-path-from-shell-copy-env "PATH"))



  ;; this issue pr fix the issue with tramp

  (defun my/projectile-remove-selected-projects ()
    "Select and remove multiple projects from the known projects list."
    (interactive)
    (let* ((projects (projectile-relevant-known-projects))
           (selected (completing-read-multiple "Select projects to remove: " projects)))
      (dolist (project selected)
        (projectile-remove-known-project project))
      (message "Removed projects: %s" (string-join selected ", "))))


#+end_src
